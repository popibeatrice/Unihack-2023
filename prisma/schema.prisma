// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url  	= env("DATABASE_URL")
  directUrl = env("DATABASE_URL_UNPOOLED")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}
 
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
 
model User {
  id                String    @id @default(cuid()) @unique
  name              String?
  email             String?   @unique
  points            Int       @default(0)
  emailVerified     DateTime?
  image             String?

  friends            User[]    @relation("Friendship")
  friendsOf          User[]  @relation("Friendship")
  sentRequests FriendRequest[] @relation("SentFriendRequests")
  receivedRequests FriendRequest[] @relation("ReceivedFriendRequests")

  courses           Course[]

  accounts          Account[]
  sessions          Session[]
}

model FriendRequest {
  id          String           @id @default(cuid())
  status      RequestStatus
  senderId    String
  receiverId  String
  sender      User     @relation("SentFriendRequests", fields: [senderId], references: [id])
  receiver    User   @relation("ReceivedFriendRequests", fields: [receiverId], references: [id])
}


enum RequestStatus {
  PENDING
  ACCEPTED
  DENIED
}

model Course {
  id            String    @id @default(cuid())
  userId        String
  name          String
  units         Unit[]

  user          User      @relation(fields: [userId], references: [id])
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@index([userId], name: "userId")
}

model Unit {
  id            String    @id @default(cuid())
  courseId      String
  name          String
  course        Course    @relation(fields: [courseId], references: [id])
  lessons       Lesson[]
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@index([courseId], name: "courseId")
}

model Lesson {
  id                    String    @id @default(cuid()) @unique
  unitId                String
  name                  String
  youtubeSearchQuery    String

  quizDone              Boolean   @default(false)

  youtubeVideoId        String?
  summary               String?   @db.VarChar(3000)
  unit                  Unit      @relation(fields: [unitId], references: [id])
  questions             Question[]

  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@index([unitId], name: "unitId")
}

model Question {
  id                    String    @id @default(cuid())
  lessonId              String
  question              String    @db.VarChar(3000)
  correctAnswer         String    @db.VarChar(3000)
  answers               String    @db.VarChar(3000)
  lesson                Lesson    @relation(fields: [lessonId], references: [id])

  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@index([lessonId], name: "lessonId")
}
